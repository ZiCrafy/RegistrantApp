// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrantApp.Server.Database;

#nullable disable

namespace RegistrantApp.Server.Migrations
{
    [DbContext(typeof(LiteContext))]
    [Migration("20231112163133_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("RegistrantApp.Shared.Database.Account", b =>
                {
                    b.Property<long>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Audit", b =>
                {
                    b.Property<long>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerEvent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Property")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueAfter")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueBefore")
                        .HasColumnType("TEXT");

                    b.HasKey("EventID");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Auto", b =>
                {
                    b.Property<long>("AutoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutoNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OwnerAutoAccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AutoID");

                    b.HasIndex("OwnerAutoAccountID");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Contragent", b =>
                {
                    b.Property<long>("ContragentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContragentID");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Document", b =>
                {
                    b.Property<long>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Authority")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Seria")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentID");

                    b.HasIndex("AccountID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.File", b =>
                {
                    b.Property<Guid>("FileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("DateTimeUpload")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DocumentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OrderID")
                        .HasColumnType("INTEGER");

                    b.HasKey("FileID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("OrderID");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Order", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AutoID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ContragentID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateTimeArrived")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeEndOrder")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeLeft")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimePlannedArrive")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeRegistration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateTimeStartOrder")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OrderDetailID")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderID");

                    b.HasIndex("AccountID");

                    b.HasIndex("AutoID");

                    b.HasIndex("ContragentID");

                    b.HasIndex("OrderDetailID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountPodons")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nomenclature")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumRealese")
                        .HasColumnType("TEXT");

                    b.Property<string>("PacketDocuments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StoreKeeperAccountAccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TochkaLoad")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeLoad")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("StoreKeeperAccountAccountID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Token", b =>
                {
                    b.Property<string>("TokenID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeSessionExpired")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeSessionStarted")
                        .HasColumnType("TEXT");

                    b.Property<string>("FingerPrint")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPv4")
                        .HasColumnType("TEXT");

                    b.Property<long>("OwnerTokenAccountID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TokenID");

                    b.HasIndex("OwnerTokenAccountID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Auto", b =>
                {
                    b.HasOne("RegistrantApp.Shared.Database.Account", "OwnerAuto")
                        .WithMany()
                        .HasForeignKey("OwnerAutoAccountID");

                    b.Navigation("OwnerAuto");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Document", b =>
                {
                    b.HasOne("RegistrantApp.Shared.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.File", b =>
                {
                    b.HasOne("RegistrantApp.Shared.Database.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentID");

                    b.HasOne("RegistrantApp.Shared.Database.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.Navigation("Document");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Order", b =>
                {
                    b.HasOne("RegistrantApp.Shared.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("RegistrantApp.Shared.Database.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoID");

                    b.HasOne("RegistrantApp.Shared.Database.Contragent", "Contragent")
                        .WithMany()
                        .HasForeignKey("ContragentID");

                    b.HasOne("RegistrantApp.Shared.Database.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Auto");

                    b.Navigation("Contragent");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.OrderDetail", b =>
                {
                    b.HasOne("RegistrantApp.Shared.Database.Account", "StoreKeeperAccount")
                        .WithMany()
                        .HasForeignKey("StoreKeeperAccountAccountID");

                    b.Navigation("StoreKeeperAccount");
                });

            modelBuilder.Entity("RegistrantApp.Shared.Database.Token", b =>
                {
                    b.HasOne("RegistrantApp.Shared.Database.Account", "OwnerToken")
                        .WithMany()
                        .HasForeignKey("OwnerTokenAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerToken");
                });
#pragma warning restore 612, 618
        }
    }
}
